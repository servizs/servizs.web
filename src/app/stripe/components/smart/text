import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { PaymentServiceProviderService } from './../../payment-service-provider.service';

@Component({
  selector: 'app-payment-details-container',
  templateUrl: './payment-details-container.component.html',
  styleUrls: ['./payment-details-container.component.css']
})
export class PaymentDetailsContainerComponent implements OnInit {
  private elements: any;
  @ViewChild('submitButton')
  submitButton: ElementRef;

  constructor(private readonly stripe: PaymentServiceProviderService) {}

  ngOnInit() {
    this.elements = this.stripe.Stripe.elements();

    // Prepare the styles for Elements.
    const style = {
      base: {
        iconColor: '#666ee8',
        color: '#31325f',
        fontWeight: 400,
        fontFamily:
          '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '15px',
        '::placeholder': {
          color: '#aab7c4'
        },
        ':-webkit-autofill': {
          color: '#666ee8'
        }
      }
    };

    /**
     * Implement a Stripe Card Element that matches the look-and-feel of the app.
     *
     * This makes it easy to collect debit and credit card payments information.
     */

    // Create a Card Element and pass some custom styles to it.
    const card = this.elements.create('card', { style });

    // Mount the Card Element on the page.
    card.mount('#card-element');

    // Monitor change events on the Card Element to display any errors.
    card.on('change', ({ error }) => {
      const cardErrors = document.getElementById('card-errors');
      if (error) {
        cardErrors.textContent = error.message;
        cardErrors.classList.add('visible');
      } else {
        cardErrors.classList.remove('visible');
      }
      // Re-enable the Pay button.
      this.submitButton.nativeElement.disabled = false;
    });

    /**
     * Implement a Stripe IBAN Element that matches the look-and-feel of the app.
     *
     * This makes it easy to collect bank account information.
     */

    // Create a IBAN Element and pass the right options for styles and supported countries.
    const ibanOptions = {
      style,
      supportedCountries: ['SEPA']
    };
    const iban = this.elements.create('iban', ibanOptions);

    // Mount the IBAN Element on the page.
    iban.mount('#iban-element');

    // Monitor change events on the IBAN Element to display any errors.
    iban.on('change', ({ error, bankName }) => {
      const ibanErrors = document.getElementById('iban-errors');
      if (error) {
        ibanErrors.textContent = error.message;
        ibanErrors.classList.add('visible');
      } else {
        ibanErrors.classList.remove('visible');
        if (bankName) {
          updateButtonLabel('sepa_debit', bankName);
        }
      }
      // Re-enable the Pay button.
      this.submitButton.nativeElement.disabled = false;
    });
  }
}
